name: Release and Publish

on:
  push:
    branches: [ main ]
    paths:
      - 'pyproject.toml'
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      new_version: ${{ steps.check.outputs.new_version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check for version bump
      id: check
      run: |
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(grep 'version = ' pyproject.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        echo "Current version: $CURRENT_VERSION"
        
        # Get previous version
        git checkout HEAD~1 pyproject.toml 2>/dev/null || true
        PREVIOUS_VERSION=$(grep 'version = ' pyproject.toml | head -1 | sed 's/version = "\(.*\)"/\1/' || echo "")
        git checkout HEAD pyproject.toml
        
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && [ -n "$PREVIOUS_VERSION" ]; then
          echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        else
          echo "No version change detected"
          echo "version_changed=false" >> $GITHUB_OUTPUT
        fi

  release:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${{ needs.check-version.outputs.new_version }}
        gh release create "v$VERSION" \
          --title "Release v$VERSION" \
          --notes "Release version $VERSION" \
          dist/*
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true